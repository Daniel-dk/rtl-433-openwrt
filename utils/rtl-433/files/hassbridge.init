#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1
PROCD_DEBUG=1

PROG=/usr/bin/hass_bridge_rtl433


append_arg() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get val "$cfg" "$var"
	[ -n "$val" -o -n "$def" ] && procd_append_param command "$opt" "${val:-$def}"
}

append_bool() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get_bool val "$cfg" "$var" "$def"
	[ "$val" = 1 ] && procd_append_param command "$opt"
}

append_list() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local vals entry

	config_get vals "$cfg" "$var"
	[ -n "$vals" ] && {
		for entry in $vals; do
			procd_append_param command "$opt" "$entry"
		done
	}
}


validate_hassbridge_section()
{
        uci_validate_section "hassbridge" "hassbridge" "${1}" \
		'enabled:bool' \
		'respawn_interval:uinteger' \
		'interval:uinteger' \
		'discovery_prefix:string' \
		'topic:string' \
		'force_update:uinteger' \
		'retain:uinteger' \
		'caCert:string' \
		'port:uinteger' \
		'host:string' \
		'password:string' \
		'user:string'

	return $?
}


load_hassbridge() {
	local cfg="$1"
	local enabled
	local respawn_interval=3540

	validate_hassbridge_section "$cfg" || { echo "validation failed"; return 1; }

	config_get enabled "$cfg" enabled
	[ "$enabled" = "1" ] || return 1

	config_get cfg_respawn_interval "$cfg" respawn_interval
	[ -n "$cfg_respawn_interval" ] && respawn_interval="$cfg_respawn_interval"

	procd_open_instance
	procd_set_param command "$PROG" 
	
	append_arg "$cfg" user "-u"
	append_arg "$cfg" password "-P"
	append_arg "$cfg" host "-H"
	append_arg "$cfg" port "-p"
	append_arg "$cfg" caCert "-c"
	append_arg "$cfg" retain "-r"
	append_arg "$cfg" force_update "-f"
	append_arg "$cfg" topic "-R"
	append_arg "$cfg" discovery_prefix "-D"
	append_arg "$cfg" interval "-i"

	procd_set_param stdout 1
	procd_set_param stderr 0

	procd_set_param respawn 0 $respawn_interval 0
	procd_close_instance
}

start_service() {
	config_load "hassbridge"
	config_foreach load_hassbridge "hassbridge"
}

service_triggers() {
	procd_add_reload_trigger "hassbridge"

	procd_open_validate
	validate_hassbridge_section
	procd_close_validate
}
